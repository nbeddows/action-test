name: Run Unit Tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" and "development" branches
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Test on each supported OS version
  build_and_execute:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest]
        include:
          - os: ubuntu-latest
            arch: x86_64
            compiler: gcc
            version: 14
          - os: ubuntu-24.04-arm
            arch: armv8
            compiler: gcc
            version: 14
          - os: windows-latest
            arch: x86_64
            compiler: msvc
            version: 193

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup additional project requirements
      - name: Install and setup Conan
        uses: conan-io/setup-conan@v1
        with: 
          config_urls: https://github.com/nbeddows/action-test.git
          cache_packages: true
      - name: Linux Install CppCheck
        if: runner.os == 'Linux'
        run: sudo apt-get install cppcheck
      - name: Windows Install CppCheck 
        if: runner.os == 'Windows'
        run: choco install cppcheck
      - name: Run CppCheck
        shell: bash
        run: cppcheck -ibuild -i_CPack_Packages -itests --inline-suppr --enable=warning,style,performance,portability,unusedFunction --std=c++20 source/
      # Build the project and run the unit tests
      - name: Install Conan profiles
        run: conan config install -sf profiles -tf profiles https://github.com/nbeddows/meen-conan-config.git --args "--branch v0.2.0"
      - name: Install dependencies
        run: conan install . --build=missing --profile:all=${{ runner.os }}-${{ matrix.arch }}-${{ matrix.compiler }}-${{ matrix.version }}-gtest
      - name: CMake presets
        run: cmake --preset conan-release
      - name: CMake build
        run: cmake --build --preset conan-release
      - name: Run unit tests
        run: artifacts/Release/${{ matrix.arch }}/bin/action_test

#  # Build the Windows x86_64 distribution
#  windows_x86_64_build:
#    # The type of runner that the job will run on
#    runs-on: windows-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      # Setup additional project requirements
#      - name: Install and setup Conan
#        uses: conan-io/setup-conan@v1
#        with:
#          config_urls: https://github.com/nbeddows/action-test.git
#          cache_packages: true
#      - name: Install Doxygen
#        uses: ssciwr/doxygen-install@v1
# #      - name: Install Cppcheck
# #        shell: bash
# #        run: |
# #          curl -OkLSs https://github.com/danmar/cppcheck/releases/download/2.17.1/cppcheck-2.17.1-x64-Setup.msi
# #          msiexec -i cppcheck-2.17.1-x64-Setup.msi /qn /norestart
# #          rm cppcheck-2.17.1-x64-Setup.msi
#
#      # Build the project and create the package
#      - name: Install Conan profiles
#        run: conan config install -sf profiles -tf profiles https://github.com/nbeddows/meen-conan-config.git --args "--branch v0.2.0"
#      - name: Install dependencies
#        run: conan install . --build=missing --profile:all=Windows-x86_64-msvc-193-gtest
#      - name: CMake presets
#        run: cmake --preset conan-default
#      - name: CMake build
#        run: cmake --build --preset conan-release
#      - name: Run unit tests
#        run: artifacts/Release/x86_64/bin/action_test
#      - name: Build package
#        run: cmake --build --preset conan-release --target=package